// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test_Entities.Model;

namespace Test_Entities.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Test_Entities.Model.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerDescription")
                        .HasColumnType("text");

                    b.HasKey("AnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Test_Entities.Model.AnswerQuestion", b =>
                {
                    b.Property<int>("AnswerQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("AnswerQuestionId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Answer_Questions");
                });

            modelBuilder.Entity("Test_Entities.Model.Firm", b =>
                {
                    b.Property<int>("FirmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirmCode")
                        .HasColumnType("text");

                    b.HasKey("FirmId");

                    b.ToTable("Firm");
                });

            modelBuilder.Entity("Test_Entities.Model.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProcessDescription")
                        .HasColumnType("text");

                    b.HasKey("ProcessId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Test_Entities.Model.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("QuestionDescription")
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Test_Entities.Model.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Test_Entities.Model.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .HasColumnType("text");

                    b.HasKey("TicketId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Test_Entities.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("FirmId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Test_Entities.Model.AnswerQuestion", b =>
                {
                    b.HasOne("Test_Entities.Model.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("Test_Entities.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("Test_Entities.Model.Survey", null)
                        .WithMany("AnswerQuestion")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Test_Entities.Model.Survey", b =>
                {
                    b.HasOne("Test_Entities.Model.Ticket", null)
                        .WithOne("Survey")
                        .HasForeignKey("Test_Entities.Model.Survey", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test_Entities.Model.Ticket", b =>
                {
                    b.HasOne("Test_Entities.Model.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId");

                    b.HasOne("Test_Entities.Model.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.HasOne("Test_Entities.Model.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderUserId");

                    b.Navigation("Process");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Test_Entities.Model.User", b =>
                {
                    b.HasOne("Test_Entities.Model.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmId");

                    b.Navigation("Firm");
                });

            modelBuilder.Entity("Test_Entities.Model.Survey", b =>
                {
                    b.Navigation("AnswerQuestion");
                });

            modelBuilder.Entity("Test_Entities.Model.Ticket", b =>
                {
                    b.Navigation("Survey");
                });
#pragma warning restore 612, 618
        }
    }
}
